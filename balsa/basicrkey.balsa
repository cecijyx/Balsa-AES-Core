(--
Copyright (c) 2011, Guy Hutchison
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
    * Neither the name of the author nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
--)

import [balsa.types.basic]
import [btypes]
import [comp_sbox]

procedure basicrkey (input key : kvector; output expand : bvector) is
  variable temp : bvector
  variable temp2 : array 0..3 of byte
  array 0..3 of channel sbi : byte
  array 0..3 of channel sbo : byte
  variable i,j : 4 bits
  variable rcon : 8 bits
begin
  for || i in 0..3 then
    comp_sbox (sbi[i], sbo[i])
  end ||
  loop
    key -> then
      for ; i in 0..15 then
        temp.d[i] := key.d[i]
      end ||
      case key.r of
        1 then rcon := 0x1 |
        2 then rcon := 0x2 |
        3 then rcon := 0x4 |
        4 then rcon := 0x8 |
        5 then rcon := 0x10 |
        6 then rcon := 0x20 |
        7 then rcon := 0x40 |
        8 then rcon := 0x80 |
        9 then rcon := 0x1b |
       10 then rcon := 0x36
        else rcon := 0
      end
    end -- select
    ;
    -- perform byte rotatation and byte sub
    for || i in 0..3 then
      sbi[i] <- temp.d[12+((i+1)%4)]
      --proc_sbox(<- temp.d[12+((i+1)%4)], ->temp2[i])
    end
    ||
    for || i in 0..3 then
      sbo[i] -> then
        if i = 0 then
          temp.d[i] := temp.d[i] xor sbo[i] xor rcon
        else
          temp.d[i] := temp.d[i] xor sbo[i]
        end
      end --select
    end ;
    for ; i in 1..3 then
      for || j in 0..3 then
        temp.d[i*4+j] := temp.d[i*4+j] xor temp.d[i*4+j-4]
      end
    end ;
    expand <- temp
  end
end
